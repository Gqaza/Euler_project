"""
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number 
would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over five hundred divisors?


Visual representation of the problem 
n:   1     2        3       4           5           6
     *     *        *       *           *           *
           * *      * *     * *         * *         * *
                    * * *   * * *       * * *       * * *   
                            * * * *     * * * *     * * * *   
                                        * * * * *   * * * * *   
                                                    * * * * * *
n+1: 2     3        4       5           6           7     
Solution approach:
    Step 1: Find number of dots in each triangle -- we can multiplying n by n+1 an divide the result by 2
    Step 2: Find factors of the number from Step 1
"""     
# %%
def triangle_dots(n):
    return int((n*(n+1)/2))

def natural_num_factors(x):
    factors = []
    for x_ in range(1,x+1):
        if x % x_ == 0:
            r = int(x/x_)
            if x_ in factors:
                break
            else:
                factors.append(x_)
            if r in x:
                break
            else:
                factors.append(r)
    return set(factors)


def first_n_divisors(n):
    for s in range(n, int(1e9)):
        seq_ = triangle_dots(s)
        seq_factors = natural_num_factors(seq_)
        if len(seq_factors) > n:
            break
    return seq_
